// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise'
import { OpenAPI } from './core/OpenAPI'
import { request as __request } from './core/request'
import type {
  AbpApiDefinitionGetData,
  AbpApiDefinitionGetResponse,
  AbpApplicationConfigurationGetData,
  AbpApplicationConfigurationGetResponse,
  AbpApplicationLocalizationGetData,
  AbpApplicationLocalizationGetResponse,
  AbpTenantFindTenantByIdData,
  AbpTenantFindTenantByIdResponse,
  AbpTenantFindTenantByNameData,
  AbpTenantFindTenantByNameResponse,
  AccountRegisterData,
  AccountRegisterResponse,
  AccountResetPasswordData,
  AccountResetPasswordResponse,
  AccountSendPasswordResetCodeData,
  AccountSendPasswordResetCodeResponse,
  AccountVerifyPasswordResetTokenData,
  AccountVerifyPasswordResetTokenResponse,
  ClientAddPostLogoutRedirectUriData,
  ClientAddPostLogoutRedirectUriResponse,
  ClientAddRedirectUriData,
  ClientAddRedirectUriResponse,
  ClientCreateData,
  ClientCreateResponse,
  ClientDeleteData,
  ClientDeleteResponse,
  ClientGetData,
  ClientGetListResponse,
  ClientGetResponse,
  ClientUpdateClientTypeData,
  ClientUpdateClientTypeResponse,
  ClientUpdateData,
  ClientUpdateResponse,
  DynamicClaimsRefreshResponse,
  EmailSettingsGetResponse,
  EmailSettingsSendTestEmailData,
  EmailSettingsSendTestEmailResponse,
  EmailSettingsUpdateData,
  EmailSettingsUpdateResponse,
  FeaturesDeleteData,
  FeaturesDeleteResponse,
  FeaturesGetData,
  FeaturesGetResponse,
  FeaturesUpdateData,
  FeaturesUpdateResponse,
  LoginCheckPasswordData,
  LoginCheckPasswordResponse,
  LoginLoginData,
  LoginLoginResponse,
  LoginLogoutResponse,
  PermissionsGetData,
  PermissionsGetResponse,
  PermissionsUpdateData,
  PermissionsUpdateResponse,
  ProfileChangePasswordData,
  ProfileChangePasswordResponse,
  ProfileGetResponse,
  ProfileUpdateData,
  ProfileUpdateResponse,
  RoleCreateData,
  RoleCreateResponse,
  RoleDeleteData,
  RoleDeleteResponse,
  RoleGetAllListResponse,
  RoleGetData,
  RoleGetListData,
  RoleGetListResponse,
  RoleGetResponse,
  RoleUpdateData,
  RoleUpdateResponse,
  TenantAddHostData,
  TenantAddHostResponse,
  TenantCreateData,
  TenantCreateResponse,
  TenantDeleteData,
  TenantDeleteDefaultConnectionStringData,
  TenantDeleteDefaultConnectionStringResponse,
  TenantDeleteResponse,
  TenantGetData,
  TenantGetDefaultConnectionStringData,
  TenantGetDefaultConnectionStringResponse,
  TenantGetListData,
  TenantGetListResponse,
  TenantGetResponse,
  TenantGetTenantGuidData,
  TenantGetTenantGuidResponse,
  TenantGetTenantHostData,
  TenantGetTenantHostResponse,
  TenantUpdateData,
  TenantUpdateDefaultConnectionStringData,
  TenantUpdateDefaultConnectionStringResponse,
  TenantUpdateResponse,
  TimeZoneSettingsGetResponse,
  TimeZoneSettingsGetTimezonesResponse,
  TimeZoneSettingsUpdateData,
  TimeZoneSettingsUpdateResponse,
  UserCreateData,
  UserCreateResponse,
  UserDeleteData,
  UserDeleteResponse,
  UserFindByEmailData,
  UserFindByEmailResponse,
  UserFindByUsernameData,
  UserFindByUsernameResponse,
  UserGetAssignableRolesResponse,
  UserGetData,
  UserGetListData,
  UserGetListResponse,
  UserGetResponse,
  UserGetRolesData,
  UserGetRolesResponse,
  UserLookupFindByIdData,
  UserLookupFindByIdResponse,
  UserLookupFindByUserNameData,
  UserLookupFindByUserNameResponse,
  UserLookupGetCountData,
  UserLookupGetCountResponse,
  UserLookupSearchData,
  UserLookupSearchResponse,
  UserUpdateData,
  UserUpdateResponse,
  UserUpdateRolesData,
  UserUpdateRolesResponse,
} from './types.gen'

/**
 * @param data The data for the request.
 * @param data.includeTypes
 * @returns ApplicationApiDescriptionModel Success
 * @throws ApiError
 */
export const abpApiDefinitionGet = (
  data: AbpApiDefinitionGetData = {}
): CancelablePromise<AbpApiDefinitionGetResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/abp/api-definition',
    query: {
      IncludeTypes: data.includeTypes,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.includeLocalizationResources
 * @returns ApplicationConfigurationDto Success
 * @throws ApiError
 */
export const abpApplicationConfigurationGet = (
  data: AbpApplicationConfigurationGetData = {}
): CancelablePromise<AbpApplicationConfigurationGetResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/abp/application-configuration',
    query: {
      IncludeLocalizationResources: data.includeLocalizationResources,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.cultureName
 * @param data.onlyDynamics
 * @returns ApplicationLocalizationDto Success
 * @throws ApiError
 */
export const abpApplicationLocalizationGet = (
  data: AbpApplicationLocalizationGetData
): CancelablePromise<AbpApplicationLocalizationGetResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/abp/application-localization',
    query: {
      CultureName: data.cultureName,
      OnlyDynamics: data.onlyDynamics,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.name
 * @returns FindTenantResultDto Success
 * @throws ApiError
 */
export const abpTenantFindTenantByName = (
  data: AbpTenantFindTenantByNameData
): CancelablePromise<AbpTenantFindTenantByNameResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/abp/multi-tenancy/tenants/by-name/{name}',
    path: {
      name: data.name,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @returns FindTenantResultDto Success
 * @throws ApiError
 */
export const abpTenantFindTenantById = (
  data: AbpTenantFindTenantByIdData
): CancelablePromise<AbpTenantFindTenantByIdResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/abp/multi-tenancy/tenants/by-id/{id}',
    path: {
      id: data.id,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns IdentityUserDto Success
 * @throws ApiError
 */
export const accountRegister = (
  data: AccountRegisterData = {}
): CancelablePromise<AccountRegisterResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/register',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const accountSendPasswordResetCode = (
  data: AccountSendPasswordResetCodeData = {}
): CancelablePromise<AccountSendPasswordResetCodeResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/send-password-reset-code',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns boolean Success
 * @throws ApiError
 */
export const accountVerifyPasswordResetToken = (
  data: AccountVerifyPasswordResetTokenData = {}
): CancelablePromise<AccountVerifyPasswordResetTokenResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/verify-password-reset-token',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const accountResetPassword = (
  data: AccountResetPasswordData = {}
): CancelablePromise<AccountResetPasswordResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/reset-password',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @returns ClientDto Success
 * @throws ApiError
 */
export const clientGetList = (): CancelablePromise<ClientGetListResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/client-management',
  })
}

/**
 * @param data The data for the request.
 * @param data.clientId
 * @param data.displayName
 * @param data.postLogoutRedirectUris
 * @param data.redirectUris
 * @param data.permissions
 * @param data.type
 * @returns ClientDto Success
 * @throws ApiError
 */
export const clientCreate = (
  data: ClientCreateData = {}
): CancelablePromise<ClientCreateResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/client-management',
    query: {
      ClientId: data.clientId,
      DisplayName: data.displayName,
      PostLogoutRedirectUris: data.postLogoutRedirectUris,
      RedirectUris: data.redirectUris,
      Permissions: data.permissions,
      Type: data.type,
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @returns ClientDto Success
 * @throws ApiError
 */
export const clientGet = (data: ClientGetData): CancelablePromise<ClientGetResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/client-management/{id}',
    path: {
      id: data.id,
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.clientId
 * @param data.displayName
 * @param data.postLogoutRedirectUris
 * @param data.redirectUris
 * @param data.permissions
 * @param data.type
 * @returns ClientDto Success
 * @throws ApiError
 */
export const clientUpdate = (data: ClientUpdateData): CancelablePromise<ClientUpdateResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/client-management/{id}',
    path: {
      id: data.id,
    },
    query: {
      ClientId: data.clientId,
      DisplayName: data.displayName,
      PostLogoutRedirectUris: data.postLogoutRedirectUris,
      RedirectUris: data.redirectUris,
      Permissions: data.permissions,
      Type: data.type,
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const clientDelete = (data: ClientDeleteData): CancelablePromise<ClientDeleteResponse> => {
  return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/client-management/{id}',
    path: {
      id: data.id,
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.redirectUri
 * @returns ClientDto Success
 * @throws ApiError
 */
export const clientAddRedirectUri = (
  data: ClientAddRedirectUriData
): CancelablePromise<ClientAddRedirectUriResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/client-management/add-redirect-uri/{id}',
    path: {
      id: data.id,
    },
    query: {
      redirectUri: data.redirectUri,
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.redirectUri
 * @returns ClientDto Success
 * @throws ApiError
 */
export const clientAddPostLogoutRedirectUri = (
  data: ClientAddPostLogoutRedirectUriData
): CancelablePromise<ClientAddPostLogoutRedirectUriResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/client-management/add-post-logout-redirect-uri/{id}',
    path: {
      id: data.id,
    },
    query: {
      redirectUri: data.redirectUri,
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.clientType
 * @returns ClientDto Success
 * @throws ApiError
 */
export const clientUpdateClientType = (
  data: ClientUpdateClientTypeData
): CancelablePromise<ClientUpdateClientTypeResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/client-management/update-client-type/{id}',
    path: {
      id: data.id,
    },
    query: {
      clientType: data.clientType,
    },
  })
}

/**
 * @returns unknown Success
 * @throws ApiError
 */
export const dynamicClaimsRefresh = (): CancelablePromise<DynamicClaimsRefreshResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/dynamic-claims/refresh',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @returns EmailSettingsDto Success
 * @throws ApiError
 */
export const emailSettingsGet = (): CancelablePromise<EmailSettingsGetResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/setting-management/emailing',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const emailSettingsUpdate = (
  data: EmailSettingsUpdateData = {}
): CancelablePromise<EmailSettingsUpdateResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/setting-management/emailing',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const emailSettingsSendTestEmail = (
  data: EmailSettingsSendTestEmailData = {}
): CancelablePromise<EmailSettingsSendTestEmailResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/setting-management/emailing/send-test-email',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.providerName
 * @param data.providerKey
 * @returns GetFeatureListResultDto Success
 * @throws ApiError
 */
export const featuresGet = (data: FeaturesGetData = {}): CancelablePromise<FeaturesGetResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/feature-management/features',
    query: {
      providerName: data.providerName,
      providerKey: data.providerKey,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.providerName
 * @param data.providerKey
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const featuresUpdate = (
  data: FeaturesUpdateData = {}
): CancelablePromise<FeaturesUpdateResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/feature-management/features',
    query: {
      providerName: data.providerName,
      providerKey: data.providerKey,
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.providerName
 * @param data.providerKey
 * @returns unknown Success
 * @throws ApiError
 */
export const featuresDelete = (
  data: FeaturesDeleteData = {}
): CancelablePromise<FeaturesDeleteResponse> => {
  return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/feature-management/features',
    query: {
      providerName: data.providerName,
      providerKey: data.providerKey,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns AbpLoginResult Success
 * @throws ApiError
 */
export const loginLogin = (data: LoginLoginData = {}): CancelablePromise<LoginLoginResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/login',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @returns unknown Success
 * @throws ApiError
 */
export const loginLogout = (): CancelablePromise<LoginLogoutResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/account/logout',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns AbpLoginResult Success
 * @throws ApiError
 */
export const loginCheckPassword = (
  data: LoginCheckPasswordData = {}
): CancelablePromise<LoginCheckPasswordResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/check-password',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.providerName
 * @param data.providerKey
 * @returns GetPermissionListResultDto Success
 * @throws ApiError
 */
export const permissionsGet = (
  data: PermissionsGetData = {}
): CancelablePromise<PermissionsGetResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/permission-management/permissions',
    query: {
      providerName: data.providerName,
      providerKey: data.providerKey,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.providerName
 * @param data.providerKey
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const permissionsUpdate = (
  data: PermissionsUpdateData = {}
): CancelablePromise<PermissionsUpdateResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/permission-management/permissions',
    query: {
      providerName: data.providerName,
      providerKey: data.providerKey,
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @returns ProfileDto Success
 * @throws ApiError
 */
export const profileGet = (): CancelablePromise<ProfileGetResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/account/my-profile',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ProfileDto Success
 * @throws ApiError
 */
export const profileUpdate = (
  data: ProfileUpdateData = {}
): CancelablePromise<ProfileUpdateResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/account/my-profile',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const profileChangePassword = (
  data: ProfileChangePasswordData = {}
): CancelablePromise<ProfileChangePasswordResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/my-profile/change-password',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @returns ListResultDtoOfIdentityRoleDto Success
 * @throws ApiError
 */
export const roleGetAllList = (): CancelablePromise<RoleGetAllListResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/roles/all',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.filter
 * @param data.sorting
 * @param data.skipCount
 * @param data.maxResultCount
 * @returns PagedResultDtoOfIdentityRoleDto Success
 * @throws ApiError
 */
export const roleGetList = (data: RoleGetListData = {}): CancelablePromise<RoleGetListResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/roles',
    query: {
      Filter: data.filter,
      Sorting: data.sorting,
      SkipCount: data.skipCount,
      MaxResultCount: data.maxResultCount,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns IdentityRoleDto Success
 * @throws ApiError
 */
export const roleCreate = (data: RoleCreateData = {}): CancelablePromise<RoleCreateResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/identity/roles',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @returns IdentityRoleDto Success
 * @throws ApiError
 */
export const roleGet = (data: RoleGetData): CancelablePromise<RoleGetResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/roles/{id}',
    path: {
      id: data.id,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns IdentityRoleDto Success
 * @throws ApiError
 */
export const roleUpdate = (data: RoleUpdateData): CancelablePromise<RoleUpdateResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/identity/roles/{id}',
    path: {
      id: data.id,
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const roleDelete = (data: RoleDeleteData): CancelablePromise<RoleDeleteResponse> => {
  return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/identity/roles/{id}',
    path: {
      id: data.id,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.host
 * @returns string Success
 * @throws ApiError
 */
export const tenantGetTenantGuid = (
  data: TenantGetTenantGuidData = {}
): CancelablePromise<TenantGetTenantGuidResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/multi-tenancy',
    query: {
      host: data.host,
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.host
 * @returns CustomTenantDto Success
 * @throws ApiError
 */
export const tenantAddHost = (
  data: TenantAddHostData = {}
): CancelablePromise<TenantAddHostResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/multi-tenancy',
    query: {
      Id: data.id,
      Host: data.host,
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @returns CustomTenantDto Success
 * @throws ApiError
 */
export const tenantGetTenantHost = (
  data: TenantGetTenantHostData
): CancelablePromise<TenantGetTenantHostResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/multi-tenancy/{id}',
    path: {
      id: data.id,
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @returns TenantDto Success
 * @throws ApiError
 */
export const tenantGet = (data: TenantGetData): CancelablePromise<TenantGetResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/multi-tenancy/tenants/{id}',
    path: {
      id: data.id,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns TenantDto Success
 * @throws ApiError
 */
export const tenantUpdate = (data: TenantUpdateData): CancelablePromise<TenantUpdateResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/multi-tenancy/tenants/{id}',
    path: {
      id: data.id,
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const tenantDelete = (data: TenantDeleteData): CancelablePromise<TenantDeleteResponse> => {
  return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/multi-tenancy/tenants/{id}',
    path: {
      id: data.id,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.filter
 * @param data.sorting
 * @param data.skipCount
 * @param data.maxResultCount
 * @returns PagedResultDtoOfTenantDto Success
 * @throws ApiError
 */
export const tenantGetList = (
  data: TenantGetListData = {}
): CancelablePromise<TenantGetListResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/multi-tenancy/tenants',
    query: {
      Filter: data.filter,
      Sorting: data.sorting,
      SkipCount: data.skipCount,
      MaxResultCount: data.maxResultCount,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns TenantDto Success
 * @throws ApiError
 */
export const tenantCreate = (
  data: TenantCreateData = {}
): CancelablePromise<TenantCreateResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/multi-tenancy/tenants',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @returns string Success
 * @throws ApiError
 */
export const tenantGetDefaultConnectionString = (
  data: TenantGetDefaultConnectionStringData
): CancelablePromise<TenantGetDefaultConnectionStringResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
    path: {
      id: data.id,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.defaultConnectionString
 * @returns unknown Success
 * @throws ApiError
 */
export const tenantUpdateDefaultConnectionString = (
  data: TenantUpdateDefaultConnectionStringData
): CancelablePromise<TenantUpdateDefaultConnectionStringResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
    path: {
      id: data.id,
    },
    query: {
      defaultConnectionString: data.defaultConnectionString,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const tenantDeleteDefaultConnectionString = (
  data: TenantDeleteDefaultConnectionStringData
): CancelablePromise<TenantDeleteDefaultConnectionStringResponse> => {
  return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
    path: {
      id: data.id,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @returns string Success
 * @throws ApiError
 */
export const timeZoneSettingsGet = (): CancelablePromise<TimeZoneSettingsGetResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/setting-management/timezone',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.timezone
 * @returns unknown Success
 * @throws ApiError
 */
export const timeZoneSettingsUpdate = (
  data: TimeZoneSettingsUpdateData = {}
): CancelablePromise<TimeZoneSettingsUpdateResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/setting-management/timezone',
    query: {
      timezone: data.timezone,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @returns NameValue Success
 * @throws ApiError
 */
export const timeZoneSettingsGetTimezones =
  (): CancelablePromise<TimeZoneSettingsGetTimezonesResponse> => {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/setting-management/timezone/timezones',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error',
      },
    })
  }

/**
 * @param data The data for the request.
 * @param data.id
 * @returns IdentityUserDto Success
 * @throws ApiError
 */
export const userGet = (data: UserGetData): CancelablePromise<UserGetResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/{id}',
    path: {
      id: data.id,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns IdentityUserDto Success
 * @throws ApiError
 */
export const userUpdate = (data: UserUpdateData): CancelablePromise<UserUpdateResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/identity/users/{id}',
    path: {
      id: data.id,
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const userDelete = (data: UserDeleteData): CancelablePromise<UserDeleteResponse> => {
  return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/identity/users/{id}',
    path: {
      id: data.id,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.filter
 * @param data.sorting
 * @param data.skipCount
 * @param data.maxResultCount
 * @returns PagedResultDtoOfIdentityUserDto Success
 * @throws ApiError
 */
export const userGetList = (data: UserGetListData = {}): CancelablePromise<UserGetListResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users',
    query: {
      Filter: data.filter,
      Sorting: data.sorting,
      SkipCount: data.skipCount,
      MaxResultCount: data.maxResultCount,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns IdentityUserDto Success
 * @throws ApiError
 */
export const userCreate = (data: UserCreateData = {}): CancelablePromise<UserCreateResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/api/identity/users',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @returns ListResultDtoOfIdentityRoleDto Success
 * @throws ApiError
 */
export const userGetRoles = (data: UserGetRolesData): CancelablePromise<UserGetRolesResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/{id}/roles',
    path: {
      id: data.id,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const userUpdateRoles = (
  data: UserUpdateRolesData
): CancelablePromise<UserUpdateRolesResponse> => {
  return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/identity/users/{id}/roles',
    path: {
      id: data.id,
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @returns ListResultDtoOfIdentityRoleDto Success
 * @throws ApiError
 */
export const userGetAssignableRoles = (): CancelablePromise<UserGetAssignableRolesResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/assignable-roles',
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.userName
 * @returns IdentityUserDto Success
 * @throws ApiError
 */
export const userFindByUsername = (
  data: UserFindByUsernameData
): CancelablePromise<UserFindByUsernameResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/by-username/{userName}',
    path: {
      userName: data.userName,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.email
 * @returns IdentityUserDto Success
 * @throws ApiError
 */
export const userFindByEmail = (
  data: UserFindByEmailData
): CancelablePromise<UserFindByEmailResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/by-email/{email}',
    path: {
      email: data.email,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.id
 * @returns UserData Success
 * @throws ApiError
 */
export const userLookupFindById = (
  data: UserLookupFindByIdData
): CancelablePromise<UserLookupFindByIdResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/lookup/{id}',
    path: {
      id: data.id,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.userName
 * @returns UserData Success
 * @throws ApiError
 */
export const userLookupFindByUserName = (
  data: UserLookupFindByUserNameData
): CancelablePromise<UserLookupFindByUserNameResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/lookup/by-username/{userName}',
    path: {
      userName: data.userName,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.filter
 * @param data.sorting
 * @param data.skipCount
 * @param data.maxResultCount
 * @returns ListResultDtoOfUserData Success
 * @throws ApiError
 */
export const userLookupSearch = (
  data: UserLookupSearchData = {}
): CancelablePromise<UserLookupSearchResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/lookup/search',
    query: {
      Filter: data.filter,
      Sorting: data.sorting,
      SkipCount: data.skipCount,
      MaxResultCount: data.maxResultCount,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}

/**
 * @param data The data for the request.
 * @param data.filter
 * @returns number Success
 * @throws ApiError
 */
export const userLookupGetCount = (
  data: UserLookupGetCountData = {}
): CancelablePromise<UserLookupGetCountResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/lookup/count',
    query: {
      Filter: data.filter,
    },
    errors: {
      400: 'Bad Request',
      401: 'Unauthorized',
      403: 'Forbidden',
      404: 'Not Found',
      500: 'Server Error',
      501: 'Server Error',
    },
  })
}
