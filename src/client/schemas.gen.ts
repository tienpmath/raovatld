// This file is auto-generated by @hey-api/openapi-ts

export const $AbpLoginResult = {
  type: 'object',
  properties: {
    result: {
      $ref: '#/components/schemas/LoginResultType',
    },
    description: {
      type: 'string',
      nullable: true,
      readOnly: true,
    },
  },
  additionalProperties: false,
} as const

export const $ActionApiDescriptionModel = {
  type: 'object',
  properties: {
    uniqueName: {
      type: 'string',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
    httpMethod: {
      type: 'string',
      nullable: true,
    },
    url: {
      type: 'string',
      nullable: true,
    },
    supportedVersions: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    parametersOnMethod: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/MethodParameterApiDescriptionModel',
      },
      nullable: true,
    },
    parameters: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ParameterApiDescriptionModel',
      },
      nullable: true,
    },
    returnValue: {
      $ref: '#/components/schemas/ReturnValueApiDescriptionModel',
    },
    allowAnonymous: {
      type: 'boolean',
      nullable: true,
    },
    implementFrom: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ApplicationApiDescriptionModel = {
  type: 'object',
  properties: {
    modules: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/ModuleApiDescriptionModel',
      },
      nullable: true,
    },
    types: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/TypeApiDescriptionModel',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ApplicationAuthConfigurationDto = {
  type: 'object',
  properties: {
    grantedPolicies: {
      type: 'object',
      additionalProperties: {
        type: 'boolean',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ApplicationConfigurationDto = {
  type: 'object',
  properties: {
    localization: {
      $ref: '#/components/schemas/ApplicationLocalizationConfigurationDto',
    },
    auth: {
      $ref: '#/components/schemas/ApplicationAuthConfigurationDto',
    },
    setting: {
      $ref: '#/components/schemas/ApplicationSettingConfigurationDto',
    },
    currentUser: {
      $ref: '#/components/schemas/CurrentUserDto',
    },
    features: {
      $ref: '#/components/schemas/ApplicationFeatureConfigurationDto',
    },
    globalFeatures: {
      $ref: '#/components/schemas/ApplicationGlobalFeatureConfigurationDto',
    },
    multiTenancy: {
      $ref: '#/components/schemas/MultiTenancyInfoDto',
    },
    currentTenant: {
      $ref: '#/components/schemas/CurrentTenantDto',
    },
    timing: {
      $ref: '#/components/schemas/TimingDto',
    },
    clock: {
      $ref: '#/components/schemas/ClockDto',
    },
    objectExtensions: {
      $ref: '#/components/schemas/ObjectExtensionsDto',
    },
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ApplicationFeatureConfigurationDto = {
  type: 'object',
  properties: {
    values: {
      type: 'object',
      additionalProperties: {
        type: 'string',
        nullable: true,
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ApplicationGlobalFeatureConfigurationDto = {
  type: 'object',
  properties: {
    enabledFeatures: {
      uniqueItems: true,
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ApplicationLocalizationConfigurationDto = {
  type: 'object',
  properties: {
    values: {
      type: 'object',
      additionalProperties: {
        type: 'object',
        additionalProperties: {
          type: 'string',
        },
      },
      nullable: true,
    },
    resources: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/ApplicationLocalizationResourceDto',
      },
      nullable: true,
    },
    languages: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/LanguageInfo',
      },
      nullable: true,
    },
    currentCulture: {
      $ref: '#/components/schemas/CurrentCultureDto',
    },
    defaultResourceName: {
      type: 'string',
      nullable: true,
    },
    languagesMap: {
      type: 'object',
      additionalProperties: {
        type: 'array',
        items: {
          $ref: '#/components/schemas/NameValue',
        },
      },
      nullable: true,
    },
    languageFilesMap: {
      type: 'object',
      additionalProperties: {
        type: 'array',
        items: {
          $ref: '#/components/schemas/NameValue',
        },
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ApplicationLocalizationDto = {
  type: 'object',
  properties: {
    resources: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/ApplicationLocalizationResourceDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ApplicationLocalizationResourceDto = {
  type: 'object',
  properties: {
    texts: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
      nullable: true,
    },
    baseResources: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ApplicationSettingConfigurationDto = {
  type: 'object',
  properties: {
    values: {
      type: 'object',
      additionalProperties: {
        type: 'string',
        nullable: true,
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ChangePasswordInput = {
  required: ['newPassword'],
  type: 'object',
  properties: {
    currentPassword: {
      maxLength: 128,
      minLength: 0,
      type: 'string',
      nullable: true,
    },
    newPassword: {
      maxLength: 128,
      minLength: 0,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const

export const $ClientDto = {
  type: 'object',
  properties: {
    clientId: {
      type: 'string',
      nullable: true,
    },
    displayName: {
      type: 'string',
      nullable: true,
    },
    postLogoutRedirectUris: {
      type: 'string',
      nullable: true,
    },
    redirectUris: {
      type: 'string',
      nullable: true,
    },
    permissions: {
      type: 'string',
      nullable: true,
    },
    type: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ClockDto = {
  type: 'object',
  properties: {
    kind: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ControllerApiDescriptionModel = {
  type: 'object',
  properties: {
    controllerName: {
      type: 'string',
      nullable: true,
    },
    controllerGroupName: {
      type: 'string',
      nullable: true,
    },
    isRemoteService: {
      type: 'boolean',
    },
    isIntegrationService: {
      type: 'boolean',
    },
    apiVersion: {
      type: 'string',
      nullable: true,
    },
    type: {
      type: 'string',
      nullable: true,
    },
    interfaces: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ControllerInterfaceApiDescriptionModel',
      },
      nullable: true,
    },
    actions: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/ActionApiDescriptionModel',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ControllerInterfaceApiDescriptionModel = {
  type: 'object',
  properties: {
    type: {
      type: 'string',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
    methods: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/InterfaceMethodApiDescriptionModel',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $CurrentCultureDto = {
  type: 'object',
  properties: {
    displayName: {
      type: 'string',
      nullable: true,
    },
    englishName: {
      type: 'string',
      nullable: true,
    },
    threeLetterIsoLanguageName: {
      type: 'string',
      nullable: true,
    },
    twoLetterIsoLanguageName: {
      type: 'string',
      nullable: true,
    },
    isRightToLeft: {
      type: 'boolean',
    },
    cultureName: {
      type: 'string',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
    nativeName: {
      type: 'string',
      nullable: true,
    },
    dateTimeFormat: {
      $ref: '#/components/schemas/DateTimeFormatDto',
    },
  },
  additionalProperties: false,
} as const

export const $CurrentTenantDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
    isAvailable: {
      type: 'boolean',
    },
  },
  additionalProperties: false,
} as const

export const $CurrentUserDto = {
  type: 'object',
  properties: {
    isAuthenticated: {
      type: 'boolean',
    },
    id: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    tenantId: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    impersonatorUserId: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    impersonatorTenantId: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    impersonatorUserName: {
      type: 'string',
      nullable: true,
    },
    impersonatorTenantName: {
      type: 'string',
      nullable: true,
    },
    userName: {
      type: 'string',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
    surName: {
      type: 'string',
      nullable: true,
    },
    email: {
      type: 'string',
      nullable: true,
    },
    emailVerified: {
      type: 'boolean',
    },
    phoneNumber: {
      type: 'string',
      nullable: true,
    },
    phoneNumberVerified: {
      type: 'boolean',
    },
    roles: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $CustomTenantDto = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      type: 'string',
      nullable: true,
    },
    host: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $DateTimeFormatDto = {
  type: 'object',
  properties: {
    calendarAlgorithmType: {
      type: 'string',
      nullable: true,
    },
    dateTimeFormatLong: {
      type: 'string',
      nullable: true,
    },
    shortDatePattern: {
      type: 'string',
      nullable: true,
    },
    fullDateTimePattern: {
      type: 'string',
      nullable: true,
    },
    dateSeparator: {
      type: 'string',
      nullable: true,
    },
    shortTimePattern: {
      type: 'string',
      nullable: true,
    },
    longTimePattern: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $EmailSettingsDto = {
  type: 'object',
  properties: {
    smtpHost: {
      type: 'string',
      nullable: true,
    },
    smtpPort: {
      type: 'integer',
      format: 'int32',
    },
    smtpUserName: {
      type: 'string',
      nullable: true,
    },
    smtpPassword: {
      type: 'string',
      nullable: true,
    },
    smtpDomain: {
      type: 'string',
      nullable: true,
    },
    smtpEnableSsl: {
      type: 'boolean',
    },
    smtpUseDefaultCredentials: {
      type: 'boolean',
    },
    defaultFromAddress: {
      type: 'string',
      nullable: true,
    },
    defaultFromDisplayName: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $EntityExtensionDto = {
  type: 'object',
  properties: {
    properties: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/ExtensionPropertyDto',
      },
      nullable: true,
    },
    configuration: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ExtensionEnumDto = {
  type: 'object',
  properties: {
    fields: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ExtensionEnumFieldDto',
      },
      nullable: true,
    },
    localizationResource: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ExtensionEnumFieldDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    value: {
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ExtensionPropertyApiCreateDto = {
  type: 'object',
  properties: {
    isAvailable: {
      type: 'boolean',
    },
  },
  additionalProperties: false,
} as const

export const $ExtensionPropertyApiDto = {
  type: 'object',
  properties: {
    onGet: {
      $ref: '#/components/schemas/ExtensionPropertyApiGetDto',
    },
    onCreate: {
      $ref: '#/components/schemas/ExtensionPropertyApiCreateDto',
    },
    onUpdate: {
      $ref: '#/components/schemas/ExtensionPropertyApiUpdateDto',
    },
  },
  additionalProperties: false,
} as const

export const $ExtensionPropertyApiGetDto = {
  type: 'object',
  properties: {
    isAvailable: {
      type: 'boolean',
    },
  },
  additionalProperties: false,
} as const

export const $ExtensionPropertyApiUpdateDto = {
  type: 'object',
  properties: {
    isAvailable: {
      type: 'boolean',
    },
  },
  additionalProperties: false,
} as const

export const $ExtensionPropertyAttributeDto = {
  type: 'object',
  properties: {
    typeSimple: {
      type: 'string',
      nullable: true,
    },
    config: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ExtensionPropertyDto = {
  type: 'object',
  properties: {
    type: {
      type: 'string',
      nullable: true,
    },
    typeSimple: {
      type: 'string',
      nullable: true,
    },
    displayName: {
      $ref: '#/components/schemas/LocalizableStringDto',
    },
    api: {
      $ref: '#/components/schemas/ExtensionPropertyApiDto',
    },
    ui: {
      $ref: '#/components/schemas/ExtensionPropertyUiDto',
    },
    attributes: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ExtensionPropertyAttributeDto',
      },
      nullable: true,
    },
    configuration: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
    },
    defaultValue: {
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ExtensionPropertyUiDto = {
  type: 'object',
  properties: {
    onTable: {
      $ref: '#/components/schemas/ExtensionPropertyUiTableDto',
    },
    onCreateForm: {
      $ref: '#/components/schemas/ExtensionPropertyUiFormDto',
    },
    onEditForm: {
      $ref: '#/components/schemas/ExtensionPropertyUiFormDto',
    },
    lookup: {
      $ref: '#/components/schemas/ExtensionPropertyUiLookupDto',
    },
  },
  additionalProperties: false,
} as const

export const $ExtensionPropertyUiFormDto = {
  type: 'object',
  properties: {
    isVisible: {
      type: 'boolean',
    },
  },
  additionalProperties: false,
} as const

export const $ExtensionPropertyUiLookupDto = {
  type: 'object',
  properties: {
    url: {
      type: 'string',
      nullable: true,
    },
    resultListPropertyName: {
      type: 'string',
      nullable: true,
    },
    displayPropertyName: {
      type: 'string',
      nullable: true,
    },
    valuePropertyName: {
      type: 'string',
      nullable: true,
    },
    filterParamName: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ExtensionPropertyUiTableDto = {
  type: 'object',
  properties: {
    isVisible: {
      type: 'boolean',
    },
  },
  additionalProperties: false,
} as const

export const $FeatureDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    displayName: {
      type: 'string',
      nullable: true,
    },
    value: {
      type: 'string',
      nullable: true,
    },
    provider: {
      $ref: '#/components/schemas/FeatureProviderDto',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    valueType: {
      $ref: '#/components/schemas/IStringValueType',
    },
    depth: {
      type: 'integer',
      format: 'int32',
    },
    parentName: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $FeatureGroupDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    displayName: {
      type: 'string',
      nullable: true,
    },
    features: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FeatureDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $FeatureProviderDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    key: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $FindTenantResultDto = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    tenantId: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
    isActive: {
      type: 'boolean',
    },
  },
  additionalProperties: false,
} as const

export const $GetFeatureListResultDto = {
  type: 'object',
  properties: {
    groups: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FeatureGroupDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $GetPermissionListResultDto = {
  type: 'object',
  properties: {
    entityDisplayName: {
      type: 'string',
      nullable: true,
    },
    groups: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PermissionGroupDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $IStringValueType = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
      readOnly: true,
    },
    properties: {
      type: 'object',
      additionalProperties: {
        nullable: true,
      },
      nullable: true,
      readOnly: true,
    },
    validator: {
      $ref: '#/components/schemas/IValueValidator',
    },
  },
  additionalProperties: false,
} as const

export const $IValueValidator = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
      readOnly: true,
    },
    properties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
  },
  additionalProperties: false,
} as const

export const $IanaTimeZone = {
  type: 'object',
  properties: {
    timeZoneName: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $IdentityRoleCreateDto = {
  required: ['name'],
  type: 'object',
  properties: {
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
    name: {
      maxLength: 256,
      minLength: 0,
      type: 'string',
    },
    isDefault: {
      type: 'boolean',
    },
    isPublic: {
      type: 'boolean',
    },
  },
  additionalProperties: false,
} as const

export const $IdentityRoleDto = {
  type: 'object',
  properties: {
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      type: 'string',
      nullable: true,
    },
    isDefault: {
      type: 'boolean',
    },
    isStatic: {
      type: 'boolean',
    },
    isPublic: {
      type: 'boolean',
    },
    concurrencyStamp: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $IdentityRoleUpdateDto = {
  required: ['name'],
  type: 'object',
  properties: {
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
    name: {
      maxLength: 256,
      minLength: 0,
      type: 'string',
    },
    isDefault: {
      type: 'boolean',
    },
    isPublic: {
      type: 'boolean',
    },
    concurrencyStamp: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $IdentityUserCreateDto = {
  required: ['email', 'password', 'userName'],
  type: 'object',
  properties: {
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
    userName: {
      maxLength: 256,
      minLength: 0,
      type: 'string',
    },
    name: {
      maxLength: 64,
      minLength: 0,
      type: 'string',
      nullable: true,
    },
    surname: {
      maxLength: 64,
      minLength: 0,
      type: 'string',
      nullable: true,
    },
    email: {
      maxLength: 256,
      minLength: 0,
      type: 'string',
      format: 'email',
    },
    phoneNumber: {
      maxLength: 16,
      minLength: 0,
      type: 'string',
      nullable: true,
    },
    isActive: {
      type: 'boolean',
    },
    lockoutEnabled: {
      type: 'boolean',
    },
    roleNames: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    password: {
      maxLength: 128,
      minLength: 0,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const

export const $IdentityUserDto = {
  type: 'object',
  properties: {
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
    creationTime: {
      type: 'string',
      format: 'date-time',
    },
    creatorId: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    lastModificationTime: {
      type: 'string',
      format: 'date-time',
      nullable: true,
    },
    lastModifierId: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    isDeleted: {
      type: 'boolean',
    },
    deleterId: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    deletionTime: {
      type: 'string',
      format: 'date-time',
      nullable: true,
    },
    tenantId: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    userName: {
      type: 'string',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
    surname: {
      type: 'string',
      nullable: true,
    },
    email: {
      type: 'string',
      nullable: true,
    },
    emailConfirmed: {
      type: 'boolean',
    },
    phoneNumber: {
      type: 'string',
      nullable: true,
    },
    phoneNumberConfirmed: {
      type: 'boolean',
    },
    isActive: {
      type: 'boolean',
    },
    lockoutEnabled: {
      type: 'boolean',
    },
    accessFailedCount: {
      type: 'integer',
      format: 'int32',
    },
    lockoutEnd: {
      type: 'string',
      format: 'date-time',
      nullable: true,
    },
    concurrencyStamp: {
      type: 'string',
      nullable: true,
    },
    entityVersion: {
      type: 'integer',
      format: 'int32',
    },
    lastPasswordChangeTime: {
      type: 'string',
      format: 'date-time',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $IdentityUserUpdateDto = {
  required: ['email', 'userName'],
  type: 'object',
  properties: {
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
    userName: {
      maxLength: 256,
      minLength: 0,
      type: 'string',
    },
    name: {
      maxLength: 64,
      minLength: 0,
      type: 'string',
      nullable: true,
    },
    surname: {
      maxLength: 64,
      minLength: 0,
      type: 'string',
      nullable: true,
    },
    email: {
      maxLength: 256,
      minLength: 0,
      type: 'string',
      format: 'email',
    },
    phoneNumber: {
      maxLength: 16,
      minLength: 0,
      type: 'string',
      nullable: true,
    },
    isActive: {
      type: 'boolean',
    },
    lockoutEnabled: {
      type: 'boolean',
    },
    roleNames: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    password: {
      maxLength: 128,
      minLength: 0,
      type: 'string',
      nullable: true,
    },
    concurrencyStamp: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $IdentityUserUpdateRolesDto = {
  required: ['roleNames'],
  type: 'object',
  properties: {
    roleNames: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
  },
  additionalProperties: false,
} as const

export const $InterfaceMethodApiDescriptionModel = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    parametersOnMethod: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/MethodParameterApiDescriptionModel',
      },
      nullable: true,
    },
    returnValue: {
      $ref: '#/components/schemas/ReturnValueApiDescriptionModel',
    },
  },
  additionalProperties: false,
} as const

export const $LanguageInfo = {
  type: 'object',
  properties: {
    cultureName: {
      type: 'string',
      nullable: true,
    },
    uiCultureName: {
      type: 'string',
      nullable: true,
    },
    displayName: {
      type: 'string',
      nullable: true,
    },
    twoLetterISOLanguageName: {
      type: 'string',
      nullable: true,
      readOnly: true,
    },
    flagIcon: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ListResultDtoOfIdentityRoleDto = {
  type: 'object',
  properties: {
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/IdentityRoleDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ListResultDtoOfUserData = {
  type: 'object',
  properties: {
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UserData',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $LocalizableStringDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    resource: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $LoginResultType = {
  enum: [1, 2, 3, 4, 5],
  type: 'integer',
  format: 'int32',
} as const

export const $MethodParameterApiDescriptionModel = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    typeAsString: {
      type: 'string',
      nullable: true,
    },
    type: {
      type: 'string',
      nullable: true,
    },
    typeSimple: {
      type: 'string',
      nullable: true,
    },
    isOptional: {
      type: 'boolean',
    },
    defaultValue: {
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ModuleApiDescriptionModel = {
  type: 'object',
  properties: {
    rootPath: {
      type: 'string',
      nullable: true,
    },
    remoteServiceName: {
      type: 'string',
      nullable: true,
    },
    controllers: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/ControllerApiDescriptionModel',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ModuleExtensionDto = {
  type: 'object',
  properties: {
    entities: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/EntityExtensionDto',
      },
      nullable: true,
    },
    configuration: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $MultiTenancyInfoDto = {
  type: 'object',
  properties: {
    isEnabled: {
      type: 'boolean',
    },
  },
  additionalProperties: false,
} as const

export const $NameValue = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    value: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ObjectExtensionsDto = {
  type: 'object',
  properties: {
    modules: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/ModuleExtensionDto',
      },
      nullable: true,
    },
    enums: {
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/ExtensionEnumDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $PagedResultDtoOfIdentityRoleDto = {
  type: 'object',
  properties: {
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/IdentityRoleDto',
      },
      nullable: true,
    },
    totalCount: {
      type: 'integer',
      format: 'int64',
    },
  },
  additionalProperties: false,
} as const

export const $PagedResultDtoOfIdentityUserDto = {
  type: 'object',
  properties: {
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/IdentityUserDto',
      },
      nullable: true,
    },
    totalCount: {
      type: 'integer',
      format: 'int64',
    },
  },
  additionalProperties: false,
} as const

export const $PagedResultDtoOfTenantDto = {
  type: 'object',
  properties: {
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TenantDto',
      },
      nullable: true,
    },
    totalCount: {
      type: 'integer',
      format: 'int64',
    },
  },
  additionalProperties: false,
} as const

export const $ParameterApiDescriptionModel = {
  type: 'object',
  properties: {
    nameOnMethod: {
      type: 'string',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
    jsonName: {
      type: 'string',
      nullable: true,
    },
    type: {
      type: 'string',
      nullable: true,
    },
    typeSimple: {
      type: 'string',
      nullable: true,
    },
    isOptional: {
      type: 'boolean',
    },
    defaultValue: {
      nullable: true,
    },
    constraintTypes: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    bindingSourceId: {
      type: 'string',
      nullable: true,
    },
    descriptorName: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $PermissionGrantInfoDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    displayName: {
      type: 'string',
      nullable: true,
    },
    parentName: {
      type: 'string',
      nullable: true,
    },
    isGranted: {
      type: 'boolean',
    },
    allowedProviders: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    grantedProviders: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProviderInfoDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $PermissionGroupDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    displayName: {
      type: 'string',
      nullable: true,
    },
    displayNameKey: {
      type: 'string',
      nullable: true,
    },
    displayNameResource: {
      type: 'string',
      nullable: true,
    },
    permissions: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PermissionGrantInfoDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ProfileDto = {
  type: 'object',
  properties: {
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
    userName: {
      type: 'string',
      nullable: true,
    },
    email: {
      type: 'string',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
    surname: {
      type: 'string',
      nullable: true,
    },
    phoneNumber: {
      type: 'string',
      nullable: true,
    },
    isExternal: {
      type: 'boolean',
    },
    hasPassword: {
      type: 'boolean',
    },
    concurrencyStamp: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $PropertyApiDescriptionModel = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    jsonName: {
      type: 'string',
      nullable: true,
    },
    type: {
      type: 'string',
      nullable: true,
    },
    typeSimple: {
      type: 'string',
      nullable: true,
    },
    isRequired: {
      type: 'boolean',
    },
    minLength: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    maxLength: {
      type: 'integer',
      format: 'int32',
      nullable: true,
    },
    minimum: {
      type: 'string',
      nullable: true,
    },
    maximum: {
      type: 'string',
      nullable: true,
    },
    regex: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ProviderInfoDto = {
  type: 'object',
  properties: {
    providerName: {
      type: 'string',
      nullable: true,
    },
    providerKey: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $RegisterDto = {
  required: ['appName', 'emailAddress', 'password', 'userName'],
  type: 'object',
  properties: {
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
    userName: {
      maxLength: 256,
      minLength: 0,
      type: 'string',
    },
    emailAddress: {
      maxLength: 256,
      minLength: 0,
      type: 'string',
      format: 'email',
    },
    password: {
      maxLength: 128,
      minLength: 0,
      type: 'string',
      format: 'password',
    },
    appName: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const

export const $RemoteServiceErrorInfo = {
  type: 'object',
  properties: {
    code: {
      type: 'string',
      nullable: true,
    },
    message: {
      type: 'string',
      nullable: true,
    },
    details: {
      type: 'string',
      nullable: true,
    },
    data: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
    },
    validationErrors: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/RemoteServiceValidationErrorInfo',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $RemoteServiceErrorResponse = {
  type: 'object',
  properties: {
    error: {
      $ref: '#/components/schemas/RemoteServiceErrorInfo',
    },
  },
  additionalProperties: false,
} as const

export const $RemoteServiceValidationErrorInfo = {
  type: 'object',
  properties: {
    message: {
      type: 'string',
      nullable: true,
    },
    members: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $ResetPasswordDto = {
  required: ['password', 'resetToken'],
  type: 'object',
  properties: {
    userId: {
      type: 'string',
      format: 'uuid',
    },
    resetToken: {
      minLength: 1,
      type: 'string',
    },
    password: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const

export const $ReturnValueApiDescriptionModel = {
  type: 'object',
  properties: {
    type: {
      type: 'string',
      nullable: true,
    },
    typeSimple: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $SendPasswordResetCodeDto = {
  required: ['appName', 'email'],
  type: 'object',
  properties: {
    email: {
      maxLength: 256,
      minLength: 0,
      type: 'string',
      format: 'email',
    },
    appName: {
      minLength: 1,
      type: 'string',
    },
    returnUrl: {
      type: 'string',
      nullable: true,
    },
    returnUrlHash: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $SendTestEmailInput = {
  required: ['senderEmailAddress', 'subject', 'targetEmailAddress'],
  type: 'object',
  properties: {
    senderEmailAddress: {
      minLength: 1,
      type: 'string',
    },
    targetEmailAddress: {
      minLength: 1,
      type: 'string',
    },
    subject: {
      minLength: 1,
      type: 'string',
    },
    body: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $TenantCreateDto = {
  required: ['adminEmailAddress', 'adminPassword', 'name'],
  type: 'object',
  properties: {
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
    name: {
      maxLength: 64,
      minLength: 0,
      type: 'string',
    },
    adminEmailAddress: {
      maxLength: 256,
      minLength: 1,
      type: 'string',
      format: 'email',
    },
    adminPassword: {
      maxLength: 128,
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const

export const $TenantDto = {
  type: 'object',
  properties: {
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
    id: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      type: 'string',
      nullable: true,
    },
    concurrencyStamp: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $TenantUpdateDto = {
  required: ['name'],
  type: 'object',
  properties: {
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
    name: {
      maxLength: 64,
      minLength: 0,
      type: 'string',
    },
    concurrencyStamp: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $TimeZone = {
  type: 'object',
  properties: {
    iana: {
      $ref: '#/components/schemas/IanaTimeZone',
    },
    windows: {
      $ref: '#/components/schemas/WindowsTimeZone',
    },
  },
  additionalProperties: false,
} as const

export const $TimingDto = {
  type: 'object',
  properties: {
    timeZone: {
      $ref: '#/components/schemas/TimeZone',
    },
  },
  additionalProperties: false,
} as const

export const $TypeApiDescriptionModel = {
  type: 'object',
  properties: {
    baseType: {
      type: 'string',
      nullable: true,
    },
    isEnum: {
      type: 'boolean',
    },
    enumNames: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    enumValues: {
      type: 'array',
      items: {},
      nullable: true,
    },
    genericArguments: {
      type: 'array',
      items: {
        type: 'string',
      },
      nullable: true,
    },
    properties: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PropertyApiDescriptionModel',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $UpdateEmailSettingsDto = {
  required: ['defaultFromAddress', 'defaultFromDisplayName'],
  type: 'object',
  properties: {
    smtpHost: {
      maxLength: 256,
      type: 'string',
      nullable: true,
    },
    smtpPort: {
      maximum: 65535,
      minimum: 1,
      type: 'integer',
      format: 'int32',
    },
    smtpUserName: {
      maxLength: 1024,
      type: 'string',
      nullable: true,
    },
    smtpPassword: {
      maxLength: 1024,
      type: 'string',
      format: 'password',
      nullable: true,
    },
    smtpDomain: {
      maxLength: 1024,
      type: 'string',
      nullable: true,
    },
    smtpEnableSsl: {
      type: 'boolean',
    },
    smtpUseDefaultCredentials: {
      type: 'boolean',
    },
    defaultFromAddress: {
      maxLength: 1024,
      minLength: 1,
      type: 'string',
    },
    defaultFromDisplayName: {
      maxLength: 1024,
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const

export const $UpdateFeatureDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    value: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $UpdateFeaturesDto = {
  type: 'object',
  properties: {
    features: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UpdateFeatureDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $UpdatePermissionDto = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      nullable: true,
    },
    isGranted: {
      type: 'boolean',
    },
  },
  additionalProperties: false,
} as const

export const $UpdatePermissionsDto = {
  type: 'object',
  properties: {
    permissions: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UpdatePermissionDto',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $UpdateProfileDto = {
  type: 'object',
  properties: {
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
    userName: {
      maxLength: 256,
      minLength: 0,
      type: 'string',
      nullable: true,
    },
    email: {
      maxLength: 256,
      minLength: 0,
      type: 'string',
      nullable: true,
    },
    name: {
      maxLength: 64,
      minLength: 0,
      type: 'string',
      nullable: true,
    },
    surname: {
      maxLength: 64,
      minLength: 0,
      type: 'string',
      nullable: true,
    },
    phoneNumber: {
      maxLength: 16,
      minLength: 0,
      type: 'string',
      nullable: true,
    },
    concurrencyStamp: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const

export const $UserData = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    tenantId: {
      type: 'string',
      format: 'uuid',
      nullable: true,
    },
    userName: {
      type: 'string',
      nullable: true,
    },
    name: {
      type: 'string',
      nullable: true,
    },
    surname: {
      type: 'string',
      nullable: true,
    },
    isActive: {
      type: 'boolean',
    },
    email: {
      type: 'string',
      nullable: true,
    },
    emailConfirmed: {
      type: 'boolean',
    },
    phoneNumber: {
      type: 'string',
      nullable: true,
    },
    phoneNumberConfirmed: {
      type: 'boolean',
    },
    extraProperties: {
      type: 'object',
      additionalProperties: {},
      nullable: true,
      readOnly: true,
    },
  },
  additionalProperties: false,
} as const

export const $UserLoginInfo = {
  required: ['password', 'userNameOrEmailAddress'],
  type: 'object',
  properties: {
    userNameOrEmailAddress: {
      maxLength: 255,
      minLength: 0,
      type: 'string',
    },
    password: {
      maxLength: 32,
      minLength: 0,
      type: 'string',
      format: 'password',
    },
    rememberMe: {
      type: 'boolean',
    },
  },
  additionalProperties: false,
} as const

export const $VerifyPasswordResetTokenInput = {
  required: ['resetToken'],
  type: 'object',
  properties: {
    userId: {
      type: 'string',
      format: 'uuid',
    },
    resetToken: {
      minLength: 1,
      type: 'string',
    },
  },
  additionalProperties: false,
} as const

export const $WindowsTimeZone = {
  type: 'object',
  properties: {
    timeZoneId: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const
