// This file is auto-generated by @hey-api/openapi-ts

export type AbpLoginResult = {
  result?: LoginResultType
  readonly description?: string | null
}

export type ActionApiDescriptionModel = {
  uniqueName?: string | null
  name?: string | null
  httpMethod?: string | null
  url?: string | null
  supportedVersions?: Array<string> | null
  parametersOnMethod?: Array<MethodParameterApiDescriptionModel> | null
  parameters?: Array<ParameterApiDescriptionModel> | null
  returnValue?: ReturnValueApiDescriptionModel
  allowAnonymous?: boolean | null
  implementFrom?: string | null
}

export type ApplicationApiDescriptionModel = {
  modules?: {
    [key: string]: ModuleApiDescriptionModel
  } | null
  types?: {
    [key: string]: TypeApiDescriptionModel
  } | null
}

export type ApplicationAuthConfigurationDto = {
  grantedPolicies?: {
    [key: string]: boolean
  } | null
}

export type ApplicationConfigurationDto = {
  localization?: ApplicationLocalizationConfigurationDto
  auth?: ApplicationAuthConfigurationDto
  setting?: ApplicationSettingConfigurationDto
  currentUser?: CurrentUserDto
  features?: ApplicationFeatureConfigurationDto
  globalFeatures?: ApplicationGlobalFeatureConfigurationDto
  multiTenancy?: MultiTenancyInfoDto
  currentTenant?: CurrentTenantDto
  timing?: TimingDto
  clock?: ClockDto
  objectExtensions?: ObjectExtensionsDto
  extraProperties?: {
    [key: string]: unknown
  } | null
}

export type ApplicationFeatureConfigurationDto = {
  values?: {
    [key: string]: string | null
  } | null
}

export type ApplicationGlobalFeatureConfigurationDto = {
  enabledFeatures?: Array<string> | null
}

export type ApplicationLocalizationConfigurationDto = {
  values?: {
    [key: string]: {
      [key: string]: string
    }
  } | null
  resources?: {
    [key: string]: ApplicationLocalizationResourceDto
  } | null
  languages?: Array<LanguageInfo> | null
  currentCulture?: CurrentCultureDto
  defaultResourceName?: string | null
  languagesMap?: {
    [key: string]: Array<NameValue>
  } | null
  languageFilesMap?: {
    [key: string]: Array<NameValue>
  } | null
}

export type ApplicationLocalizationDto = {
  resources?: {
    [key: string]: ApplicationLocalizationResourceDto
  } | null
}

export type ApplicationLocalizationResourceDto = {
  texts?: {
    [key: string]: string
  } | null
  baseResources?: Array<string> | null
}

export type ApplicationSettingConfigurationDto = {
  values?: {
    [key: string]: string | null
  } | null
}

export type ChangePasswordInput = {
  currentPassword?: string | null
  newPassword: string
}

export type ClientDto = {
  clientId?: string | null
  displayName?: string | null
  postLogoutRedirectUris?: string | null
  redirectUris?: string | null
  permissions?: string | null
  type?: string | null
}

export type ClockDto = {
  kind?: string | null
}

export type ControllerApiDescriptionModel = {
  controllerName?: string | null
  controllerGroupName?: string | null
  isRemoteService?: boolean
  isIntegrationService?: boolean
  apiVersion?: string | null
  type?: string | null
  interfaces?: Array<ControllerInterfaceApiDescriptionModel> | null
  actions?: {
    [key: string]: ActionApiDescriptionModel
  } | null
}

export type ControllerInterfaceApiDescriptionModel = {
  type?: string | null
  name?: string | null
  methods?: Array<InterfaceMethodApiDescriptionModel> | null
}

export type CurrentCultureDto = {
  displayName?: string | null
  englishName?: string | null
  threeLetterIsoLanguageName?: string | null
  twoLetterIsoLanguageName?: string | null
  isRightToLeft?: boolean
  cultureName?: string | null
  name?: string | null
  nativeName?: string | null
  dateTimeFormat?: DateTimeFormatDto
}

export type CurrentTenantDto = {
  id?: string | null
  name?: string | null
  isAvailable?: boolean
}

export type CurrentUserDto = {
  isAuthenticated?: boolean
  id?: string | null
  tenantId?: string | null
  impersonatorUserId?: string | null
  impersonatorTenantId?: string | null
  impersonatorUserName?: string | null
  impersonatorTenantName?: string | null
  userName?: string | null
  name?: string | null
  surName?: string | null
  email?: string | null
  emailVerified?: boolean
  phoneNumber?: string | null
  phoneNumberVerified?: boolean
  roles?: Array<string> | null
}

export type CustomTenantDto = {
  id?: string
  name?: string | null
  host?: string | null
}

export type DateTimeFormatDto = {
  calendarAlgorithmType?: string | null
  dateTimeFormatLong?: string | null
  shortDatePattern?: string | null
  fullDateTimePattern?: string | null
  dateSeparator?: string | null
  shortTimePattern?: string | null
  longTimePattern?: string | null
}

export type EmailSettingsDto = {
  smtpHost?: string | null
  smtpPort?: number
  smtpUserName?: string | null
  smtpPassword?: string | null
  smtpDomain?: string | null
  smtpEnableSsl?: boolean
  smtpUseDefaultCredentials?: boolean
  defaultFromAddress?: string | null
  defaultFromDisplayName?: string | null
}

export type EntityExtensionDto = {
  properties?: {
    [key: string]: ExtensionPropertyDto
  } | null
  configuration?: {
    [key: string]: unknown
  } | null
}

export type ExtensionEnumDto = {
  fields?: Array<ExtensionEnumFieldDto> | null
  localizationResource?: string | null
}

export type ExtensionEnumFieldDto = {
  name?: string | null
  value?: unknown
}

export type ExtensionPropertyApiCreateDto = {
  isAvailable?: boolean
}

export type ExtensionPropertyApiDto = {
  onGet?: ExtensionPropertyApiGetDto
  onCreate?: ExtensionPropertyApiCreateDto
  onUpdate?: ExtensionPropertyApiUpdateDto
}

export type ExtensionPropertyApiGetDto = {
  isAvailable?: boolean
}

export type ExtensionPropertyApiUpdateDto = {
  isAvailable?: boolean
}

export type ExtensionPropertyAttributeDto = {
  typeSimple?: string | null
  config?: {
    [key: string]: unknown
  } | null
}

export type ExtensionPropertyDto = {
  type?: string | null
  typeSimple?: string | null
  displayName?: LocalizableStringDto
  api?: ExtensionPropertyApiDto
  ui?: ExtensionPropertyUiDto
  attributes?: Array<ExtensionPropertyAttributeDto> | null
  configuration?: {
    [key: string]: unknown
  } | null
  defaultValue?: unknown
}

export type ExtensionPropertyUiDto = {
  onTable?: ExtensionPropertyUiTableDto
  onCreateForm?: ExtensionPropertyUiFormDto
  onEditForm?: ExtensionPropertyUiFormDto
  lookup?: ExtensionPropertyUiLookupDto
}

export type ExtensionPropertyUiFormDto = {
  isVisible?: boolean
}

export type ExtensionPropertyUiLookupDto = {
  url?: string | null
  resultListPropertyName?: string | null
  displayPropertyName?: string | null
  valuePropertyName?: string | null
  filterParamName?: string | null
}

export type ExtensionPropertyUiTableDto = {
  isVisible?: boolean
}

export type FeatureDto = {
  name?: string | null
  displayName?: string | null
  value?: string | null
  provider?: FeatureProviderDto
  description?: string | null
  valueType?: IStringValueType
  depth?: number
  parentName?: string | null
}

export type FeatureGroupDto = {
  name?: string | null
  displayName?: string | null
  features?: Array<FeatureDto> | null
}

export type FeatureProviderDto = {
  name?: string | null
  key?: string | null
}

export type FindTenantResultDto = {
  success?: boolean
  tenantId?: string | null
  name?: string | null
  isActive?: boolean
}

export type GetFeatureListResultDto = {
  groups?: Array<FeatureGroupDto> | null
}

export type GetPermissionListResultDto = {
  entityDisplayName?: string | null
  groups?: Array<PermissionGroupDto> | null
}

export type IStringValueType = {
  readonly name?: string | null
  readonly properties?: {
    [key: string]: unknown
  } | null
  validator?: IValueValidator
}

export type IValueValidator = {
  readonly name?: string | null
  readonly properties?: {
    [key: string]: unknown
  } | null
}

export type IanaTimeZone = {
  timeZoneName?: string | null
}

export type IdentityRoleCreateDto = {
  readonly extraProperties?: {
    [key: string]: unknown
  } | null
  name: string
  isDefault?: boolean
  isPublic?: boolean
}

export type IdentityRoleDto = {
  readonly extraProperties?: {
    [key: string]: unknown
  } | null
  id?: string
  name?: string | null
  isDefault?: boolean
  isStatic?: boolean
  isPublic?: boolean
  concurrencyStamp?: string | null
}

export type IdentityRoleUpdateDto = {
  readonly extraProperties?: {
    [key: string]: unknown
  } | null
  name: string
  isDefault?: boolean
  isPublic?: boolean
  concurrencyStamp?: string | null
}

export type IdentityUserCreateDto = {
  readonly extraProperties?: {
    [key: string]: unknown
  } | null
  userName: string
  name?: string | null
  surname?: string | null
  email: string
  phoneNumber?: string | null
  isActive?: boolean
  lockoutEnabled?: boolean
  roleNames?: Array<string> | null
  password: string
}

export type IdentityUserDto = {
  readonly extraProperties?: {
    [key: string]: unknown
  } | null
  id?: string
  creationTime?: string
  creatorId?: string | null
  lastModificationTime?: string | null
  lastModifierId?: string | null
  isDeleted?: boolean
  deleterId?: string | null
  deletionTime?: string | null
  tenantId?: string | null
  userName?: string | null
  name?: string | null
  surname?: string | null
  email?: string | null
  emailConfirmed?: boolean
  phoneNumber?: string | null
  phoneNumberConfirmed?: boolean
  isActive?: boolean
  lockoutEnabled?: boolean
  accessFailedCount?: number
  lockoutEnd?: string | null
  concurrencyStamp?: string | null
  entityVersion?: number
  lastPasswordChangeTime?: string | null
}

export type IdentityUserUpdateDto = {
  readonly extraProperties?: {
    [key: string]: unknown
  } | null
  userName: string
  name?: string | null
  surname?: string | null
  email: string
  phoneNumber?: string | null
  isActive?: boolean
  lockoutEnabled?: boolean
  roleNames?: Array<string> | null
  password?: string | null
  concurrencyStamp?: string | null
}

export type IdentityUserUpdateRolesDto = {
  roleNames: Array<string>
}

export type InterfaceMethodApiDescriptionModel = {
  name?: string | null
  parametersOnMethod?: Array<MethodParameterApiDescriptionModel> | null
  returnValue?: ReturnValueApiDescriptionModel
}

export type LanguageInfo = {
  cultureName?: string | null
  uiCultureName?: string | null
  displayName?: string | null
  readonly twoLetterISOLanguageName?: string | null
  flagIcon?: string | null
}

export type ListResultDtoOfIdentityRoleDto = {
  items?: Array<IdentityRoleDto> | null
}

export type ListResultDtoOfUserData = {
  items?: Array<UserData> | null
}

export type LocalizableStringDto = {
  name?: string | null
  resource?: string | null
}

export type LoginResultType = 1 | 2 | 3 | 4 | 5

export type MethodParameterApiDescriptionModel = {
  name?: string | null
  typeAsString?: string | null
  type?: string | null
  typeSimple?: string | null
  isOptional?: boolean
  defaultValue?: unknown
}

export type ModuleApiDescriptionModel = {
  rootPath?: string | null
  remoteServiceName?: string | null
  controllers?: {
    [key: string]: ControllerApiDescriptionModel
  } | null
}

export type ModuleExtensionDto = {
  entities?: {
    [key: string]: EntityExtensionDto
  } | null
  configuration?: {
    [key: string]: unknown
  } | null
}

export type MultiTenancyInfoDto = {
  isEnabled?: boolean
}

export type NameValue = {
  name?: string | null
  value?: string | null
}

export type ObjectExtensionsDto = {
  modules?: {
    [key: string]: ModuleExtensionDto
  } | null
  enums?: {
    [key: string]: ExtensionEnumDto
  } | null
}

export type PagedResultDtoOfIdentityRoleDto = {
  items?: Array<IdentityRoleDto> | null
  totalCount?: number
}

export type PagedResultDtoOfIdentityUserDto = {
  items?: Array<IdentityUserDto> | null
  totalCount?: number
}

export type PagedResultDtoOfTenantDto = {
  items?: Array<TenantDto> | null
  totalCount?: number
}

export type ParameterApiDescriptionModel = {
  nameOnMethod?: string | null
  name?: string | null
  jsonName?: string | null
  type?: string | null
  typeSimple?: string | null
  isOptional?: boolean
  defaultValue?: unknown
  constraintTypes?: Array<string> | null
  bindingSourceId?: string | null
  descriptorName?: string | null
}

export type PermissionGrantInfoDto = {
  name?: string | null
  displayName?: string | null
  parentName?: string | null
  isGranted?: boolean
  allowedProviders?: Array<string> | null
  grantedProviders?: Array<ProviderInfoDto> | null
}

export type PermissionGroupDto = {
  name?: string | null
  displayName?: string | null
  displayNameKey?: string | null
  displayNameResource?: string | null
  permissions?: Array<PermissionGrantInfoDto> | null
}

export type ProfileDto = {
  readonly extraProperties?: {
    [key: string]: unknown
  } | null
  userName?: string | null
  email?: string | null
  name?: string | null
  surname?: string | null
  phoneNumber?: string | null
  isExternal?: boolean
  hasPassword?: boolean
  concurrencyStamp?: string | null
}

export type PropertyApiDescriptionModel = {
  name?: string | null
  jsonName?: string | null
  type?: string | null
  typeSimple?: string | null
  isRequired?: boolean
  minLength?: number | null
  maxLength?: number | null
  minimum?: string | null
  maximum?: string | null
  regex?: string | null
}

export type ProviderInfoDto = {
  providerName?: string | null
  providerKey?: string | null
}

export type RegisterDto = {
  readonly extraProperties?: {
    [key: string]: unknown
  } | null
  userName: string
  emailAddress: string
  password: string
  appName: string
}

export type RemoteServiceErrorInfo = {
  code?: string | null
  message?: string | null
  details?: string | null
  data?: {
    [key: string]: unknown
  } | null
  validationErrors?: Array<RemoteServiceValidationErrorInfo> | null
}

export type RemoteServiceErrorResponse = {
  error?: RemoteServiceErrorInfo
}

export type RemoteServiceValidationErrorInfo = {
  message?: string | null
  members?: Array<string> | null
}

export type ResetPasswordDto = {
  userId?: string
  resetToken: string
  password: string
}

export type ReturnValueApiDescriptionModel = {
  type?: string | null
  typeSimple?: string | null
}

export type SendPasswordResetCodeDto = {
  email: string
  appName: string
  returnUrl?: string | null
  returnUrlHash?: string | null
}

export type SendTestEmailInput = {
  senderEmailAddress: string
  targetEmailAddress: string
  subject: string
  body?: string | null
}

export type TenantCreateDto = {
  readonly extraProperties?: {
    [key: string]: unknown
  } | null
  name: string
  adminEmailAddress: string
  adminPassword: string
}

export type TenantDto = {
  readonly extraProperties?: {
    [key: string]: unknown
  } | null
  id?: string
  name?: string | null
  concurrencyStamp?: string | null
}

export type TenantUpdateDto = {
  readonly extraProperties?: {
    [key: string]: unknown
  } | null
  name: string
  concurrencyStamp?: string | null
}

export type TimeZone = {
  iana?: IanaTimeZone
  windows?: WindowsTimeZone
}

export type TimingDto = {
  timeZone?: TimeZone
}

export type TypeApiDescriptionModel = {
  baseType?: string | null
  isEnum?: boolean
  enumNames?: Array<string> | null
  enumValues?: Array<unknown> | null
  genericArguments?: Array<string> | null
  properties?: Array<PropertyApiDescriptionModel> | null
}

export type UpdateEmailSettingsDto = {
  smtpHost?: string | null
  smtpPort?: number
  smtpUserName?: string | null
  smtpPassword?: string | null
  smtpDomain?: string | null
  smtpEnableSsl?: boolean
  smtpUseDefaultCredentials?: boolean
  defaultFromAddress: string
  defaultFromDisplayName: string
}

export type UpdateFeatureDto = {
  name?: string | null
  value?: string | null
}

export type UpdateFeaturesDto = {
  features?: Array<UpdateFeatureDto> | null
}

export type UpdatePermissionDto = {
  name?: string | null
  isGranted?: boolean
}

export type UpdatePermissionsDto = {
  permissions?: Array<UpdatePermissionDto> | null
}

export type UpdateProfileDto = {
  readonly extraProperties?: {
    [key: string]: unknown
  } | null
  userName?: string | null
  email?: string | null
  name?: string | null
  surname?: string | null
  phoneNumber?: string | null
  concurrencyStamp?: string | null
}

export type UserData = {
  id?: string
  tenantId?: string | null
  userName?: string | null
  name?: string | null
  surname?: string | null
  isActive?: boolean
  email?: string | null
  emailConfirmed?: boolean
  phoneNumber?: string | null
  phoneNumberConfirmed?: boolean
  readonly extraProperties?: {
    [key: string]: unknown
  } | null
}

export type UserLoginInfo = {
  userNameOrEmailAddress: string
  password: string
  rememberMe?: boolean
}

export type VerifyPasswordResetTokenInput = {
  userId?: string
  resetToken: string
}

export type WindowsTimeZone = {
  timeZoneId?: string | null
}

export type AbpApiDefinitionGetData = {
  includeTypes?: boolean
}

export type AbpApiDefinitionGetResponse = ApplicationApiDescriptionModel

export type AbpApplicationConfigurationGetData = {
  includeLocalizationResources?: boolean
}

export type AbpApplicationConfigurationGetResponse = ApplicationConfigurationDto

export type AbpApplicationLocalizationGetData = {
  cultureName: string
  onlyDynamics?: boolean
}

export type AbpApplicationLocalizationGetResponse = ApplicationLocalizationDto

export type AbpTenantFindTenantByNameData = {
  name: string
}

export type AbpTenantFindTenantByNameResponse = FindTenantResultDto

export type AbpTenantFindTenantByIdData = {
  id: string
}

export type AbpTenantFindTenantByIdResponse = FindTenantResultDto

export type AccountRegisterData = {
  requestBody?: RegisterDto
}

export type AccountRegisterResponse = IdentityUserDto

export type AccountSendPasswordResetCodeData = {
  requestBody?: SendPasswordResetCodeDto
}

export type AccountSendPasswordResetCodeResponse = unknown

export type AccountVerifyPasswordResetTokenData = {
  requestBody?: VerifyPasswordResetTokenInput
}

export type AccountVerifyPasswordResetTokenResponse = boolean

export type AccountResetPasswordData = {
  requestBody?: ResetPasswordDto
}

export type AccountResetPasswordResponse = unknown

export type ClientGetListResponse = Array<ClientDto>

export type ClientCreateData = {
  clientId?: string
  displayName?: string
  permissions?: string
  postLogoutRedirectUris?: string
  redirectUris?: string
  type?: string
}

export type ClientCreateResponse = ClientDto

export type ClientGetData = {
  id: string
}

export type ClientGetResponse = ClientDto

export type ClientUpdateData = {
  clientId?: string
  displayName?: string
  id: string
  permissions?: string
  postLogoutRedirectUris?: string
  redirectUris?: string
  type?: string
}

export type ClientUpdateResponse = ClientDto

export type ClientDeleteData = {
  id: string
}

export type ClientDeleteResponse = unknown

export type ClientAddRedirectUriData = {
  id: string
  redirectUri?: string
}

export type ClientAddRedirectUriResponse = ClientDto

export type ClientAddPostLogoutRedirectUriData = {
  id: string
  redirectUri?: string
}

export type ClientAddPostLogoutRedirectUriResponse = ClientDto

export type ClientUpdateClientTypeData = {
  clientType?: string
  id: string
}

export type ClientUpdateClientTypeResponse = ClientDto

export type DynamicClaimsRefreshResponse = unknown

export type EmailSettingsGetResponse = EmailSettingsDto

export type EmailSettingsUpdateData = {
  requestBody?: UpdateEmailSettingsDto
}

export type EmailSettingsUpdateResponse = unknown

export type EmailSettingsSendTestEmailData = {
  requestBody?: SendTestEmailInput
}

export type EmailSettingsSendTestEmailResponse = unknown

export type FeaturesGetData = {
  providerKey?: string
  providerName?: string
}

export type FeaturesGetResponse = GetFeatureListResultDto

export type FeaturesUpdateData = {
  providerKey?: string
  providerName?: string
  requestBody?: UpdateFeaturesDto
}

export type FeaturesUpdateResponse = unknown

export type FeaturesDeleteData = {
  providerKey?: string
  providerName?: string
}

export type FeaturesDeleteResponse = unknown

export type LoginLoginData = {
  requestBody?: UserLoginInfo
}

export type LoginLoginResponse = AbpLoginResult

export type LoginLogoutResponse = unknown

export type LoginCheckPasswordData = {
  requestBody?: UserLoginInfo
}

export type LoginCheckPasswordResponse = AbpLoginResult

export type PermissionsGetData = {
  providerKey?: string
  providerName?: string
}

export type PermissionsGetResponse = GetPermissionListResultDto

export type PermissionsUpdateData = {
  providerKey?: string
  providerName?: string
  requestBody?: UpdatePermissionsDto
}

export type PermissionsUpdateResponse = unknown

export type ProfileGetResponse = ProfileDto

export type ProfileUpdateData = {
  requestBody?: UpdateProfileDto
}

export type ProfileUpdateResponse = ProfileDto

export type ProfileChangePasswordData = {
  requestBody?: ChangePasswordInput
}

export type ProfileChangePasswordResponse = unknown

export type RoleGetAllListResponse = ListResultDtoOfIdentityRoleDto

export type RoleGetListData = {
  filter?: string
  maxResultCount?: number
  skipCount?: number
  sorting?: string
}

export type RoleGetListResponse = PagedResultDtoOfIdentityRoleDto

export type RoleCreateData = {
  requestBody?: IdentityRoleCreateDto
}

export type RoleCreateResponse = IdentityRoleDto

export type RoleGetData = {
  id: string
}

export type RoleGetResponse = IdentityRoleDto

export type RoleUpdateData = {
  id: string
  requestBody?: IdentityRoleUpdateDto
}

export type RoleUpdateResponse = IdentityRoleDto

export type RoleDeleteData = {
  id: string
}

export type RoleDeleteResponse = unknown

export type TenantGetTenantGuidData = {
  host?: string
}

export type TenantGetTenantGuidResponse = string

export type TenantAddHostData = {
  host?: string
  id?: string
}

export type TenantAddHostResponse = CustomTenantDto

export type TenantGetTenantHostData = {
  id: string
}

export type TenantGetTenantHostResponse = CustomTenantDto

export type TenantGetData = {
  id: string
}

export type TenantGetResponse = TenantDto

export type TenantUpdateData = {
  id: string
  requestBody?: TenantUpdateDto
}

export type TenantUpdateResponse = TenantDto

export type TenantDeleteData = {
  id: string
}

export type TenantDeleteResponse = unknown

export type TenantGetListData = {
  filter?: string
  maxResultCount?: number
  skipCount?: number
  sorting?: string
}

export type TenantGetListResponse = PagedResultDtoOfTenantDto

export type TenantCreateData = {
  requestBody?: TenantCreateDto
}

export type TenantCreateResponse = TenantDto

export type TenantGetDefaultConnectionStringData = {
  id: string
}

export type TenantGetDefaultConnectionStringResponse = string

export type TenantUpdateDefaultConnectionStringData = {
  defaultConnectionString?: string
  id: string
}

export type TenantUpdateDefaultConnectionStringResponse = unknown

export type TenantDeleteDefaultConnectionStringData = {
  id: string
}

export type TenantDeleteDefaultConnectionStringResponse = unknown

export type TimeZoneSettingsGetResponse = string

export type TimeZoneSettingsUpdateData = {
  timezone?: string
}

export type TimeZoneSettingsUpdateResponse = unknown

export type TimeZoneSettingsGetTimezonesResponse = Array<NameValue>

export type UserGetData = {
  id: string
}

export type UserGetResponse = IdentityUserDto

export type UserUpdateData = {
  id: string
  requestBody?: IdentityUserUpdateDto
}

export type UserUpdateResponse = IdentityUserDto

export type UserDeleteData = {
  id: string
}

export type UserDeleteResponse = unknown

export type UserGetListData = {
  filter?: string
  maxResultCount?: number
  skipCount?: number
  sorting?: string
}

export type UserGetListResponse = PagedResultDtoOfIdentityUserDto

export type UserCreateData = {
  requestBody?: IdentityUserCreateDto
}

export type UserCreateResponse = IdentityUserDto

export type UserGetRolesData = {
  id: string
}

export type UserGetRolesResponse = ListResultDtoOfIdentityRoleDto

export type UserUpdateRolesData = {
  id: string
  requestBody?: IdentityUserUpdateRolesDto
}

export type UserUpdateRolesResponse = unknown

export type UserGetAssignableRolesResponse = ListResultDtoOfIdentityRoleDto

export type UserFindByUsernameData = {
  userName: string
}

export type UserFindByUsernameResponse = IdentityUserDto

export type UserFindByEmailData = {
  email: string
}

export type UserFindByEmailResponse = IdentityUserDto

export type UserLookupFindByIdData = {
  id: string
}

export type UserLookupFindByIdResponse = UserData

export type UserLookupFindByUserNameData = {
  userName: string
}

export type UserLookupFindByUserNameResponse = UserData

export type UserLookupSearchData = {
  filter?: string
  maxResultCount?: number
  skipCount?: number
  sorting?: string
}

export type UserLookupSearchResponse = ListResultDtoOfUserData

export type UserLookupGetCountData = {
  filter?: string
}

export type UserLookupGetCountResponse = number

export type $OpenApiTs = {
  '/api/abp/api-definition': {
    get: {
      req: AbpApiDefinitionGetData
      res: {
        /**
         * Success
         */
        200: ApplicationApiDescriptionModel
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/abp/application-configuration': {
    get: {
      req: AbpApplicationConfigurationGetData
      res: {
        /**
         * Success
         */
        200: ApplicationConfigurationDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/abp/application-localization': {
    get: {
      req: AbpApplicationLocalizationGetData
      res: {
        /**
         * Success
         */
        200: ApplicationLocalizationDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/abp/multi-tenancy/tenants/by-name/{name}': {
    get: {
      req: AbpTenantFindTenantByNameData
      res: {
        /**
         * Success
         */
        200: FindTenantResultDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/abp/multi-tenancy/tenants/by-id/{id}': {
    get: {
      req: AbpTenantFindTenantByIdData
      res: {
        /**
         * Success
         */
        200: FindTenantResultDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/account/register': {
    post: {
      req: AccountRegisterData
      res: {
        /**
         * Success
         */
        200: IdentityUserDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/account/send-password-reset-code': {
    post: {
      req: AccountSendPasswordResetCodeData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/account/verify-password-reset-token': {
    post: {
      req: AccountVerifyPasswordResetTokenData
      res: {
        /**
         * Success
         */
        200: boolean
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/account/reset-password': {
    post: {
      req: AccountResetPasswordData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/client-management': {
    get: {
      res: {
        /**
         * Success
         */
        200: Array<ClientDto>
      }
    }
    post: {
      req: ClientCreateData
      res: {
        /**
         * Success
         */
        200: ClientDto
      }
    }
  }
  '/api/client-management/{id}': {
    get: {
      req: ClientGetData
      res: {
        /**
         * Success
         */
        200: ClientDto
      }
    }
    put: {
      req: ClientUpdateData
      res: {
        /**
         * Success
         */
        200: ClientDto
      }
    }
    delete: {
      req: ClientDeleteData
      res: {
        /**
         * Success
         */
        200: unknown
      }
    }
  }
  '/api/client-management/add-redirect-uri/{id}': {
    post: {
      req: ClientAddRedirectUriData
      res: {
        /**
         * Success
         */
        200: ClientDto
      }
    }
  }
  '/api/client-management/add-post-logout-redirect-uri/{id}': {
    post: {
      req: ClientAddPostLogoutRedirectUriData
      res: {
        /**
         * Success
         */
        200: ClientDto
      }
    }
  }
  '/api/client-management/update-client-type/{id}': {
    post: {
      req: ClientUpdateClientTypeData
      res: {
        /**
         * Success
         */
        200: ClientDto
      }
    }
  }
  '/api/account/dynamic-claims/refresh': {
    post: {
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/setting-management/emailing': {
    get: {
      res: {
        /**
         * Success
         */
        200: EmailSettingsDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    post: {
      req: EmailSettingsUpdateData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/setting-management/emailing/send-test-email': {
    post: {
      req: EmailSettingsSendTestEmailData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/feature-management/features': {
    get: {
      req: FeaturesGetData
      res: {
        /**
         * Success
         */
        200: GetFeatureListResultDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    put: {
      req: FeaturesUpdateData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    delete: {
      req: FeaturesDeleteData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/account/login': {
    post: {
      req: LoginLoginData
      res: {
        /**
         * Success
         */
        200: AbpLoginResult
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/account/logout': {
    get: {
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/account/check-password': {
    post: {
      req: LoginCheckPasswordData
      res: {
        /**
         * Success
         */
        200: AbpLoginResult
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/permission-management/permissions': {
    get: {
      req: PermissionsGetData
      res: {
        /**
         * Success
         */
        200: GetPermissionListResultDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    put: {
      req: PermissionsUpdateData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/account/my-profile': {
    get: {
      res: {
        /**
         * Success
         */
        200: ProfileDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    put: {
      req: ProfileUpdateData
      res: {
        /**
         * Success
         */
        200: ProfileDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/account/my-profile/change-password': {
    post: {
      req: ProfileChangePasswordData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/identity/roles/all': {
    get: {
      res: {
        /**
         * Success
         */
        200: ListResultDtoOfIdentityRoleDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/identity/roles': {
    get: {
      req: RoleGetListData
      res: {
        /**
         * Success
         */
        200: PagedResultDtoOfIdentityRoleDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    post: {
      req: RoleCreateData
      res: {
        /**
         * Success
         */
        200: IdentityRoleDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/identity/roles/{id}': {
    get: {
      req: RoleGetData
      res: {
        /**
         * Success
         */
        200: IdentityRoleDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    put: {
      req: RoleUpdateData
      res: {
        /**
         * Success
         */
        200: IdentityRoleDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    delete: {
      req: RoleDeleteData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/multi-tenancy': {
    get: {
      req: TenantGetTenantGuidData
      res: {
        /**
         * Success
         */
        200: string
      }
    }
    post: {
      req: TenantAddHostData
      res: {
        /**
         * Success
         */
        200: CustomTenantDto
      }
    }
  }
  '/api/multi-tenancy/{id}': {
    get: {
      req: TenantGetTenantHostData
      res: {
        /**
         * Success
         */
        200: CustomTenantDto
      }
    }
  }
  '/api/multi-tenancy/tenants/{id}': {
    get: {
      req: TenantGetData
      res: {
        /**
         * Success
         */
        200: TenantDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    put: {
      req: TenantUpdateData
      res: {
        /**
         * Success
         */
        200: TenantDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    delete: {
      req: TenantDeleteData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/multi-tenancy/tenants': {
    get: {
      req: TenantGetListData
      res: {
        /**
         * Success
         */
        200: PagedResultDtoOfTenantDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    post: {
      req: TenantCreateData
      res: {
        /**
         * Success
         */
        200: TenantDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/multi-tenancy/tenants/{id}/default-connection-string': {
    get: {
      req: TenantGetDefaultConnectionStringData
      res: {
        /**
         * Success
         */
        200: string
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    put: {
      req: TenantUpdateDefaultConnectionStringData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    delete: {
      req: TenantDeleteDefaultConnectionStringData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/setting-management/timezone': {
    get: {
      res: {
        /**
         * Success
         */
        200: string
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    post: {
      req: TimeZoneSettingsUpdateData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/setting-management/timezone/timezones': {
    get: {
      res: {
        /**
         * Success
         */
        200: Array<NameValue>
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/identity/users/{id}': {
    get: {
      req: UserGetData
      res: {
        /**
         * Success
         */
        200: IdentityUserDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    put: {
      req: UserUpdateData
      res: {
        /**
         * Success
         */
        200: IdentityUserDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    delete: {
      req: UserDeleteData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/identity/users': {
    get: {
      req: UserGetListData
      res: {
        /**
         * Success
         */
        200: PagedResultDtoOfIdentityUserDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    post: {
      req: UserCreateData
      res: {
        /**
         * Success
         */
        200: IdentityUserDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/identity/users/{id}/roles': {
    get: {
      req: UserGetRolesData
      res: {
        /**
         * Success
         */
        200: ListResultDtoOfIdentityRoleDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
    put: {
      req: UserUpdateRolesData
      res: {
        /**
         * Success
         */
        200: unknown
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/identity/users/assignable-roles': {
    get: {
      res: {
        /**
         * Success
         */
        200: ListResultDtoOfIdentityRoleDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/identity/users/by-username/{userName}': {
    get: {
      req: UserFindByUsernameData
      res: {
        /**
         * Success
         */
        200: IdentityUserDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/identity/users/by-email/{email}': {
    get: {
      req: UserFindByEmailData
      res: {
        /**
         * Success
         */
        200: IdentityUserDto
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/identity/users/lookup/{id}': {
    get: {
      req: UserLookupFindByIdData
      res: {
        /**
         * Success
         */
        200: UserData
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/identity/users/lookup/by-username/{userName}': {
    get: {
      req: UserLookupFindByUserNameData
      res: {
        /**
         * Success
         */
        200: UserData
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/identity/users/lookup/search': {
    get: {
      req: UserLookupSearchData
      res: {
        /**
         * Success
         */
        200: ListResultDtoOfUserData
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
  '/api/identity/users/lookup/count': {
    get: {
      req: UserLookupGetCountData
      res: {
        /**
         * Success
         */
        200: number
        /**
         * Bad Request
         */
        400: RemoteServiceErrorResponse
        /**
         * Unauthorized
         */
        401: RemoteServiceErrorResponse
        /**
         * Forbidden
         */
        403: RemoteServiceErrorResponse
        /**
         * Not Found
         */
        404: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        500: RemoteServiceErrorResponse
        /**
         * Server Error
         */
        501: RemoteServiceErrorResponse
      }
    }
  }
}
